{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"Welcome to Uvicorn Extensions","text":"<p>This repository contains a collection of experimental features for Uvicorn.</p> <p>Each feature is implemented as a separate package, and can be installed independently.</p>","location":""},{"title":"Packages","text":"<ul> <li>uvicorn-httparse: Uvicorn HTTP implementation that uses httparse to parse HTTP requests.</li> <li>uvicorn-trailers: Uvicorn with HTTP Trailers extension support.</li> <li>asgi-trailers: An ASGI framework that supports HTTP Trailers.</li> </ul>","location":"#packages"},{"title":"Contribution","text":"<p>This document contains guidelines for contributing to the project. Please read it before contributing.</p>","location":"contributing/"},{"title":"Development","text":"<p>This project uses pantsbuild as a build system.</p> <p>Feel free to check their docs about how to set up your IDE.</p>","location":"contributing/#development"},{"title":"ASGI Trailers","text":"","location":"packages/asgi-trailers/"},{"title":"ASGI Trailers","text":"<p>The <code>asgi-trailers</code> package implements a StreamingResponse that supports HTTP Trailers.</p>","location":"packages/asgi-trailers/#asgi-trailers"},{"title":"Installation","text":"<pre><code>pip install asgi-trailers\n</code></pre>","location":"packages/asgi-trailers/#installation"},{"title":"Usage","text":"<p>The most common use case is to use the <code>StreamingResponse</code> as a drop-in replacement for Starlette's <code>StreamingResponse</code>.</p> <p>It's also possible to use as a standalone ASGI application.</p> main.py<pre><code>import asyncio\nimport time\nfrom contextvars import ContextVar\n\nimport asgi_trailers import StreamingResponse\nfrom starlette.applications import Starlette\n\nstarted_time: ContextVar[float] = ContextVar(\"started_time\")\n\n\nasync def slow_numbers(numbers) -&gt; str:\n    yield('&lt;html&gt;&lt;body&gt;&lt;ul&gt;')\n    for number in range(numbers):\n        yield '&lt;li&gt;%d&lt;/li&gt;' % number\n        await asyncio.sleep(0.5)\n    yield('&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;')\n\n\nasync def trailers():\n    start = started_time.get()\n    elapsed = time.time() - start\n    yield 'server-timing', f'total;dur={elapsed:.3f}'\n\n\nasync def app(scope, receive, send):\n    assert scope['type'] == 'http'\n    started_time.set(time.time())\n    generator = slow_numbers(10)\n    response = StreamingResponse(\n        generator,\n        headers={\"trailers\": \"server-timing\"},\n        trailers=trailers,\n    )\n    await response(scope, receive, send)\n</code></pre> <p>On this example, the <code>server-timing</code> trailer will be sent after the response body is sent.</p>","location":"packages/asgi-trailers/#usage"},{"title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>","location":"packages/asgi-trailers/#license"},{"title":"Uvicorn Denial","text":"","location":"packages/uvicorn-denial/"},{"title":"Uvicorn Denial","text":"<p>The <code>uvicorn-denial</code> package implements the Websocket Denial Response on Uvicorn.</p>","location":"packages/uvicorn-denial/#uvicorn-denial"},{"title":"Installation","text":"<pre><code>pip install uvicorn-denial\n</code></pre>","location":"packages/uvicorn-denial/#installation"},{"title":"Usage","text":"ServerClient   <p>You can run the following code with <code>python main.py</code>.</p> main.py<pre><code>import uvicorn\nimport uvicorn_denial\n\n\nasync def app(scope, receive, send):\n    await send(\n        {\n            \"type\": \"websocket.http.response.start\",\n            \"status\": 200,\n            \"headers\": [(\"content-length\", \"4\")]\n        }\n    )\n    await send({\"type\": \"websocket.http.response.body\", \"body\": b\"haha\"})\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, ws=uvicorn_denial.WSProtocol)\n</code></pre>   <p>Then using curl, we can make calls to our server:</p> <pre><code>curl --include \\\n    --no-buffer \\\n    --header \"Connection: Upgrade\" \\\n    --header \"Upgrade: websocket\" \\\n    --header \"Host: example.com:80\" \\\n    --header \"Origin: http://example.com:80\" \\\n    --header \"Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ==\" \\\n    --header \"Sec-WebSocket-Version: 13\" \\\n    http://localhost:8000/\n</code></pre>","location":"packages/uvicorn-denial/#usage"},{"title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>","location":"packages/uvicorn-denial/#license"},{"title":"Uvicorn HTTParse","text":"","location":"packages/uvicorn-httparse/"},{"title":"Uvicorn HTTParse","text":"<p>The <code>uvicorn-httparse</code> package uses httparse to parse HTTP requests in Uvicorn.</p> <p>httparse is a Python binding of a Rust library that gives its name.</p>","location":"packages/uvicorn-httparse/#uvicorn-httparse"},{"title":"Installation","text":"<pre><code>pip install uvicorn-httparse\n</code></pre>","location":"packages/uvicorn-httparse/#installation"},{"title":"Usage","text":"<pre><code>import uvicorn\nimport uvicorn_httparse\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app:app\", http=uvicorn_httparse.HttparseProtocol)\n</code></pre> <p>For more details, see the Uvicorn documentation.</p>","location":"packages/uvicorn-httparse/#usage"},{"title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>","location":"packages/uvicorn-httparse/#license"},{"title":"Uvicorn Trailers","text":"","location":"packages/uvicorn-trailers/"},{"title":"Uvicorn Trailers","text":"<p>The <code>uvicorn-trailers</code> package adds support for HTTP Trailers to Uvicorn.</p>","location":"packages/uvicorn-trailers/#uvicorn-trailers"},{"title":"Installation","text":"<pre><code>pip install uvicorn-trailers\n</code></pre>","location":"packages/uvicorn-trailers/#installation"},{"title":"Usage","text":"<pre><code>import uvicorn\nimport uvicorn_trailers\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app:app\", http=uvicorn_trailers.HTTPProtocol)\n</code></pre>","location":"packages/uvicorn-trailers/#usage"},{"title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>","location":"packages/uvicorn-trailers/#license"}]}